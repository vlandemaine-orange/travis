sudo: required
services:
  - docker

language: python
jobs:
  include:
    - stage: build
      script: |
          docker info
          [ -z "$DOCKER_PASS" ] && echo "Registry Password is not set or empty (or protected) in Secret Variables" && exit 1
          [ -z "$DOCKER_USER" ] && echo "Registry User is not set or empty (or protected) in Secret Variables" && exit 1
          echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin
          docker build -t vlandemaineorange/circleci-testing:latest .
          docker push vlandemaineorange/circleci-testing:latest
    - stage: test
      script: |
          export CONTAINER_TEST_ID=`docker run -d vlandemaineorange/circleci-testing:latest` && echo $CONTAINER_TEST_ID
          echo $CONTAINER_TEST_ID && export CONTAINER_IP=`docker inspect --format "{{ .NetworkSettings.IPAddress }}" $CONTAINER_TEST_ID` && echo $CONTAINER_IP
          docker logs $CONTAINER_TEST_ID
          sleep 5
          docker ps
          sh -c '[ $(curl --insecure -o -I -L -s -w "%{http_code}" http://$CONTAINER_IP:5000/) -eq 200 ]'
    - stage: release
      if: tag IS present
      script: |
          docker pull vlandemaineorange/circleci-testing:latest
          docker tag vlandemaineorange/circleci-testing:latest vlandemaineorange/circleci-testing:$TRAVIS_TAG
          echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin
          docker push vlandemaineorange/circleci-testing:$TRAVIS_TAG
    - stage: deploy
      script: |
          curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.7.0/bin/linux/amd64/kubectl && \
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          printf "%s" "$KUBECONFIG" > kubeconfig.json
          export KUBECONFIG='kubeconfig.json'
          if [ $(kubectl get pods -n travis | grep hello-world | wc -l ) -gt 1 ]; then kubectl -n travis replace -f  .k8s/hello-world-deployment.yaml; else kubectl apply -n travis -f .k8s/hello-world-deployment.yaml; fi;
          if [ $(kubectl get svc -n travis | grep hello-world | wc -l ) -gt 1 ]; then kubectl -n travis replace -f  .k8s/hello-world-svc.yaml; else kubectl apply -n travis -f .k8s/hello-world-svc.yaml; fi;
          if [ $(kubectl get ingress -n travis | grep hello-world | wc -l ) -gt 1 ]; then kubectl -n travis replace -f  .k8s/hello-world-ingress.yaml; else kubectl apply -n travis -f .k8s/hello-world-ingress.yaml; fi;
          kubectl patch deployment -n travis hello-world -p '{"spec":{"template":{"spec":{"containers":[{"name":"hello-world-test","env":[{"name":"RESTART_","value":"'$(date +%s)'"}]}]}}}}'
